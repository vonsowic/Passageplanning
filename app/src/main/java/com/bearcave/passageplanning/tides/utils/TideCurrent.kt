package com.bearcave.passageplanning.tides.utils


import com.bearcave.passageplanning.tides.database.TideCurrentInfoHandler
import com.bearcave.passageplanning.tides.utils.exceptions.TideStationNotFound

enum class TideCurrent(val id: Int, val gaugeId: Int, val tideCurrentStation: String, val spring: FloatArray, val neap: FloatArray) {


    GRAVESEND_REACH(
            0,
            6,
            "Gravesend Reach",
            floatArrayOf(
                    0.3601111111111111f, 1.1832222222222222f, 1.2346666666666668f, 0.9774444444444444f, 0.8745555555555556f, 0.565888888888889f, 0.4115555555555556f, 1.3890000000000002f, 1.3890000000000002f, 1.2346666666666668f, 0.926f, 0.3601111111111111f, 0.05144444444444445f
                    ),
            floatArrayOf(
                    0.2057777777777778f, 0.8231111111111112f, 0.8231111111111112f, 0.6687777777777778f, 0.565888888888889f, 0.3601111111111111f, 0.3086666666666667f, 0.9774444444444444f, 0.9774444444444444f, 0.8745555555555556f, 0.6687777777777778f, 0.25722222222222224f, 0.05144444444444445f
                    )
    ),


    SEA_REACH(
            1,
            2,
            "Sea Reach",
            floatArrayOf(
                    0.0f, 0.1028888888888889f, 0.8231111111111112f, 0.926f, 0.8231111111111112f, 0.6173333333333334f, 0.4115555555555556f, 0.3086666666666667f, 0.9774444444444444f, 1.2861111111111112f, 0.926f, 0.4115555555555556f, 0.1028888888888889f
            ),
            floatArrayOf(
                    0.0f, 0.1028888888888889f, 0.565888888888889f, 0.6173333333333334f, 0.565888888888889f, 0.4115555555555556f, 0.3086666666666667f, 0.2057777777777778f, 0.6687777777777778f, 0.8745555555555556f, 0.6173333333333334f, 0.3086666666666667f, 0.1028888888888889f
            )
    ),


    WARPS(
            2,
            2,
            "Warps",
            floatArrayOf(
                    0.2057777777777778f, 0.4115555555555556f, 0.8745555555555556f, 0.8745555555555556f, 0.7202222222222222f, 0.6173333333333334f, 0.15433333333333335f, 0.6173333333333334f, 1.1832222222222222f, 1.2346666666666668f, 0.926f, 0.6173333333333334f, 0.4115555555555556f
                    ),
            floatArrayOf(
                    0.1028888888888889f, 0.25722222222222224f, 0.565888888888889f, 0.565888888888889f, 0.4115555555555556f, 0.3601111111111111f, 0.05144444444444445f, 0.3601111111111111f, 0.7202222222222222f, 0.7716666666666667f, 0.565888888888889f, 0.3601111111111111f, 0.25722222222222224f
            )
    ),


    N_RED_SAND(
            3,
            2,
            "N Red Sand",
            floatArrayOf(
                    0.1028888888888889f, 0.5144444444444445f, 0.8745555555555556f, 0.8745555555555556f, 0.8231111111111112f, 0.6687777777777778f, 0.25722222222222224f, 0.3086666666666667f, 1.0803333333333334f, 1.2346666666666668f, 0.9774444444444444f, 0.5144444444444445f, 0.1028888888888889f
            ),
            floatArrayOf(
                    0.05144444444444445f, 0.3601111111111111f, 0.565888888888889f, 0.565888888888889f, 0.565888888888889f, 0.463f, 0.15433333333333335f, 0.2057777777777778f, 0.7202222222222222f, 0.8231111111111112f, 0.6173333333333334f, 0.3601111111111111f, 0.1028888888888889f
            )
    ),


    PRINCES_IN(
            4,
            2,
            "Princes In",
            floatArrayOf(
                    0.15433333333333335f, 0.6173333333333334f, 0.7716666666666667f, 0.7716666666666667f, 0.8231111111111112f, 0.463f, 0.25722222222222224f, 0.8745555555555556f, 1.131777777777778f, 1.028888888888889f, 0.6687777777777778f, 0.4115555555555556f, 0.2057777777777778f
            ),
            floatArrayOf(
                    0.15433333333333335f, 0.6173333333333334f, 0.7716666666666667f, 0.7716666666666667f, 0.8231111111111112f, 0.463f, 0.25722222222222224f, 0.8745555555555556f, 1.131777777777778f, 1.028888888888889f, 0.6687777777777778f, 0.4115555555555556f, 0.2057777777777778f
            )
    ),

    PRINCES_NO3(
            5,
            2,
            "Princes no3",
            floatArrayOf(
                    0.25722222222222224f, 0.3086666666666667f, 0.926f, 1.028888888888889f, 1.2861111111111112f, 0.9774444444444444f, 0.3086666666666667f, 0.7716666666666667f, 1.2861111111111112f, 1.2346666666666668f, 1.0803333333333334f, 0.8745555555555556f, 0.4115555555555556f
            ),
            floatArrayOf(
                    0.1028888888888889f, 0.1028888888888889f, 0.463f, 0.7202222222222222f, 0.8231111111111112f, 0.6687777777777778f, 0.2057777777777778f, 0.4115555555555556f, 0.7202222222222222f, 0.7716666666666667f, 0.6173333333333334f, 0.463f, 0.25722222222222224f
            )
    ),

    PRINCES_OUT(
            6,
            2,
            "Princes Out",
            floatArrayOf(
                    0.1028888888888889f, 0.565888888888889f, 0.6687777777777778f, 0.7716666666666667f, 0.8231111111111112f, 0.6687777777777778f, 0.25722222222222224f, 0.3086666666666667f, 0.8745555555555556f, 1.0803333333333334f, 0.8231111111111112f, 0.565888888888889f, 0.1028888888888889f
                    ),
            floatArrayOf(
                    0.05144444444444445f, 0.3601111111111111f, 0.4115555555555556f, 0.565888888888889f, 0.5144444444444445f, 0.4115555555555556f, 0.15433333333333335f, 0.2057777777777778f, 0.565888888888889f, 0.7202222222222222f, 0.5144444444444445f, 0.3601111111111111f, 0.05144444444444445f
            )
    ),

    NE_SPIT(
            7,
            2,
            "NE Spit",
            floatArrayOf(
                    0.6173333333333334f, 0.6687777777777778f, 0.6687777777777778f, 0.6173333333333334f, 0.8745555555555556f, 0.9774444444444444f, 0.8231111111111112f, 0.6687777777777778f, 0.7202222222222222f, 0.7716666666666667f, 0.6687777777777778f, 0.565888888888889f, 0.6173333333333334f
                    ),
            floatArrayOf(
                    0.3601111111111111f, 0.4115555555555556f, 0.3601111111111111f, 0.3601111111111111f, 0.5144444444444445f, 0.565888888888889f, 0.463f, 0.4115555555555556f, 0.4115555555555556f, 0.4115555555555556f, 0.3601111111111111f, 0.3086666666666667f, 0.3601111111111111f
            )
    );

    fun getValue(id: Int, type: TideType?) =
            when(type){
                TideType.SPRING -> getSpringValue(id)
                TideType.NEAP   -> getNeapValue(id)
                null            -> (getSpringValue(id) + getNeapValue(id)) / 2
            }

    fun getValue(id: Int, lowWater: Float, highWater: Float) = getValue(id, getType(lowWater, highWater))

    fun getValue(tideCurrentInfo: TideCurrentInfoHandler) = getValue(
            tideCurrentInfo.hoursToHighWater,
            tideCurrentInfo.lowWater,
            tideCurrentInfo.highWater
    )

    fun getSpringValue(id: Int) = spring[id+6]

    fun getNeapValue(id: Int) = neap[id+6]

    fun names() = values().map { it.tideCurrentStation }

    companion object {
        fun getById(id: Int): TideCurrent {
            values()
                    .filter { it.id == id }
                    .forEach { return it }

            throw TideStationNotFound()
        }

        fun getByName(name: String): TideCurrent {
            values()
                    .filter { it.tideCurrentStation == name }
                    .forEach { return it }

            throw TideStationNotFound()
        }

        fun getType(lowWater: Float, highWater: Float): TideType? {
            val height = highWater-lowWater
            return when {
                height < 4f -> TideType.NEAP
                height > 5f -> TideType.SPRING
                else -> null
            }
        }
    }


}